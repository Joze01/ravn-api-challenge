generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model cart_items {
  cart_id    String   @db.Uuid
  product_id String   @db.Uuid
  quantity   BigInt?
  carts      carts    @relation(fields: [cart_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products   products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([cart_id, product_id])
}

model carts {
  id         String       @id @db.Uuid
  user_id    String       @db.Uuid
  created_at DateTime     @db.Timestamp(6)
  cart_items cart_items[]
  users      users        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model categories {
  id                 String               @id @db.Uuid
  name               String               @db.VarChar(100)
  created_at         DateTime             @db.Timestamp(6)
  updated_at         DateTime             @db.Timestamp(6)
  product_categories product_categories[]
}

model likes {
  id         String   @id @db.Uuid
  user_id    String   @db.Uuid
  product_id String   @db.Uuid
  products   products @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model order_items {
  order_id   String   @db.Uuid
  product_id String   @db.Uuid
  quantity   BigInt?
  price      BigInt?
  sub_total  BigInt?
  orders     orders   @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products   products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([order_id, product_id])
}

model orders {
  id           String        @id @db.Uuid
  user_id      String        @db.Uuid
  total_amount BigInt
  status       order_status
  created_at   DateTime      @db.Timestamp(6)
  updated_at   DateTime      @db.Timestamp(6)
  order_items  order_items[]
  users        users         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payments     payments[]
}

model password_resets {
  id          String   @id @db.Uuid
  user_id     String   @db.Uuid
  reset_token String   @db.VarChar(255)
  created_at  DateTime @db.Timestamp(6)
  expires_at  DateTime @db.Timestamp(6)
  users       users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model payments {
  id             String   @id @db.Uuid
  order_id       String   @db.Uuid
  stripe_payment String   @db.VarChar(255)
  status         String   @db.VarChar(50)
  created_at     DateTime @db.Timestamp(6)
  orders         orders   @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model product_categories {
  product_id  String     @db.Uuid
  category_id String     @db.Uuid
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products    products   @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([product_id, category_id])
}

model product_images {
  id         String   @id @db.Uuid
  product_id String   @db.Uuid
  url        String
  created_at DateTime @db.Timestamp(6)
  products   products @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model products {
  id                 String               @id @db.Uuid
  name               String               @db.VarChar(255)
  description        String?
  price              BigInt
  stock              Int
  delete_at          DateTime             @db.Timestamp(6)
  created_at         DateTime             @db.Timestamp(6)
  updated_at         DateTime             @db.Timestamp(6)
  cart_items         cart_items[]
  likes              likes[]
  order_items        order_items[]
  product_categories product_categories[]
  product_images     product_images[]
}

model tokens {
  user_id       String   @db.Uuid
  access_token  String   @id(map: "tokens_pk")
  refresh_token String?
  created_at    DateTime @default(now()) @db.Timestamp(6)
  users         users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String            @unique @db.VarChar(255)
  password        String            @db.VarChar(255)
  name            String            @db.VarChar(255)
  role            role
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @default(now()) @db.Timestamp(6)
  carts           carts[]
  likes           likes[]
  orders          orders[]
  password_resets password_resets[]
  tokens          tokens[]
}

enum order_status {
  pending
  processing
  succeeded
  failed
  canceled
}

enum role {
  CLIENT
  MANAGER
}
